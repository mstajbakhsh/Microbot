{"name":"Microbot","tagline":"A simple JAVA bot to grab web resources with lots of configuration (anonimity, user agent, wait before requests, auto compression, and etc). Mainly useful when you want to grab information from a web site.","body":"# Microbot (Micro + robot)\r\nA simple **JAVA** bot to grab web resources with lots of configuration (anonimity, user agent, wait before requests, auto compression, and etc). Mainly useful when you want to grab information from a web site. **IT IS NOT A CRAWLER**, it is just a bot. You should feed the bot with links (URLs) and it will fetch and store them.\r\n\r\n## Abilities\r\nThe Microbot uses a configuration file which can configure following abilities:\r\n+ Fetching multi links: It will handle cookies and referer for multi requests.\r\n+ User Agents (UA): it will select random UA which the UA list is given by the user.\r\n+ Using proxy: mainly SOCKS for networks such as TOR.\r\n+ Resume: If user terminates the program, it will store the remaining links in a file named **Links.csv**\r\n+ Auto compressor: Specify limit for output folder, after threshold reached, it will automatically compress the files into a compressed file.\r\n+ Logs: It will store logs, so the user can handle errors (Ex: http response code is 4xx or 5xx or etc.)\r\n\r\n## Files and formats\r\nIn the following, a tutorial is described to show the configuration. You may find sample user Agents and sample configuration file in **sample Files** directory\r\n\r\nThere are several topics configurations:\r\n+ Anonymizer\r\n+ Web Requests\r\n+ Load and Store\r\n+ Logging\r\n\r\nThe format for description:\r\nNAME: {AVAILABLE OPTIONS} ~ Description\r\n\r\n### Anonymizer\r\nThere are four variables in anonymizer section:\r\n\r\n+ Anonymizer: {TOR, I2P} ~ The type of anonymizer network if used. The configuration is useful if you used proxy along it.\r\n\r\n+ AnonymizerProxyType: {SOCKS, DIRECT, HTTP, NONE} ~ The type of proxy. If you want to use it directly, use NONE proxy. Mostly TOR will use SOCKS proxy.\r\n\r\n+ AnonymizerIP: {ANY valid IPv4} ~ The IP address of the proxy. TOR uses LOCALHOST (127.0.0.1) in most of the cases.\r\n\r\n+ AnonymizerPort: {ANY valid port} ~ The port number of the proxy. TOR uses 9050 or 9150 in most of the cases.\r\n\r\nCAUTION: Microbot just uses anonymizer network as proxy. You may use other tools or scripts to force TOR or any other anonymizer network to change the IP of the request. (Ex: a script to send HUP signal to TOR process each 100 seconds).\r\n\r\n### Web Requests\r\nThe variables in web requests are as follows:\r\n\r\n+ AcceptSelfSignedCertificates: {true, false} ~ If true, Microbot will accept invalid or self signed certificates (http**s**).\r\n\r\n+ ThreadCount: {ANY positive integer -> 1, 2, 3, ...} ~ The number of threads for speedup fetching.\r\n\r\n+ MinSleep: {ANY positive integer -> 1, 2, 3, ...} ~ The minimum amount of time (in seconds) that each thread will wait after request a new resource.\r\n\r\n+ MaxSleep: {ANY positive integer larger than MinSleep -> 1, 2, 3, ...} ~ The maximum amount of time (in seconds) that each thread will wait after request a new resource.\r\n\r\n+ UserAgentListFile: {Valid text file path} ~ The file has simple format. Each link is in a new line. For compatibilit the new line should use WINDOWS format new line (`\\r\\n`). There is a file named UA.txt that has list of UAs. You may use your UA list.\r\n\r\n+ RandomUserAgent: {true, false} ~ If true, it will use a random user agent from UserAgentListFile, if false, it will use the first UA (line) in UserAgentListFile.\r\n\r\n+ Cookie: {Any valid String in cookie format} ~ If you want to use a fixed cookie for all the requests, fill this parameter. Actually this field may not be used in most of the cases. You can leave it blank.\r\n\r\n### Load and Store\r\nThe variables involved in loading and storing are as follows:\r\n\r\n+ InputFile: {Valid text file path in CSV format} ~ The input file which consists two main information: Name of output file, URL. Following is a sample format\r\n\r\n\r\n\r\n`NAME,URL`\r\n\r\n`page1.html,http://foo.bar/page1.php`\r\n\r\n`page2.html,http://foo.bar/page2.php~~~http://foo.bar/page2.php?id=Hello~~~http://foo.bar/page2.php?id=World`\r\n\r\n`page3.html,http://foo.bar/page3.php`\r\n\r\n`page4.html,http://foo.bar/page4.php`\r\n\r\n\r\n\r\n\r\nPage 1, 3, 4 are simple examples. Page 2 is referer based example which links are separated using ~~~ or any valid user defined separator.\r\n\r\n+ MainURLColumnName: {URL COLUMN Name in InputFile} ~ In the above sample there are two columns: NAME and URL. URL is the MainURLColumnName.\r\n\r\n+ OutputFileColumnName: {Output file name column in InputFile} ~ In the above sample there are two columns: NAME and URL. NAME is the OutputFileColumnName.\r\n\r\n+ LinksSeparator: {ANY valid string character sequence} ~ In the above sample (second line) uses ~~~ as the separator for referer based requests.\r\n\r\n+ OutputDirectory: {ANY valid folder path which user has permission for writing in it} ~ All the HTML output will be stored here with the name indicated in OutputFileColumnName.\r\n\r\n+ OutputLimit: {B, KB, MG, GB, TB} ~ The threshold when Microbot should start to compress retrieved documents. (Ex: 2MB or 300MB)\r\n\r\n+ DeleteAfterCompress: {true, false} ~ Indicates if Microbot should delete retrieved files after successfully compress them.\r\n\r\n+ CompressorType: {ZIP, TAR, RAR, GZIP} ~ The type of output archive. Currently only ZIP format is implemented. Other options will cause an exception.\r\n\r\n### Logging\r\nThe logging parameters are very simple.\r\n\r\n+ Debug: {true, false} ~ Will print debug information in standard system output.\r\n\r\n+ VeryVerbos: {true, false} ~ Will print debug information in very verbose mode. Debug mode should be enabled. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}